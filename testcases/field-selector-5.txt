varying float xx, yy;

float hash(float a, float b) {
	return a * b;
}

void main(void) {
	float r = 3.0 * 2.0, x;
	x = (2.0 * (r=3.1) * 1.5);

	if (x < 20.0) {
		 r = min(hash(1.0, 2.0), 3.0);
	}

	if (x < 20.0) {
		 vec2 s, x;
		 s = 2.0 * x;
	}

   while(x < 20.0) {
		s = s + 1.0;
   }

   x+=20.0 * x;
}


==================================================================================================

   declarator float
      declarator_item xx
         identifier xx
      declarator_item yy
         identifier yy
   function_declaration (float) hash
         return
            binary *
               identifier a
               identifier b
   function_declaration (void) main
         declarator float
            declarator_item r
               identifier r
               binary *
                  float 3
                  float 2
            declarator_item x
               identifier x
         expression
            binary =
               identifier x
               binary *
                  binary *
                     float 2
                     binary =
                        identifier r
                        float 3.1
                  float 1.5
         if_statement
               expression
                  binary =
                     identifier r
                     function_call min
                        function_call hash
                           float 1
                           float 2
                        float 3
         if_statement
               declarator vec2
                  declarator_item s
                     identifier s
                  declarator_item x
                     identifier x
               expression
                  binary =
                     identifier s
                     binary *
                        float 2
                        identifier x
         while_statement
               expression
                  binary =
                     identifier s
                     binary +
                        identifier s
                        float 1
         expression
            binary +=
               identifier x
               binary *
                  float 20
                  identifier x

{ functions:
   { hash: { returnType: 'float', parameters: [Object] },
     main: { returnType: 'void', parameters: {} } },
  descriptors: [],
  lastType: null,
  typeTable: {},
  currentFunctionName: 'main',
  lastState: null,
  lastSelector: null,
  aliasesIndex: 0,
  aliases: {} }
  
  
  
- Escanear:	  
	  * expression:
			- Escanear expression: binary, identifier, float, function_call
				- Si no contiene funciones del usuario
				- Si no contiene =, +=, -=, ...
	  * declarator:
			- Escanear initializer: binary, identifier, float, function_call
				- Si no contiene funciones del usuario
				- Si no contiene =, +=, -=, ...	
		- Trackeo de variables 

- Procesar al final los posibles

